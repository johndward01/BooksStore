@inject AppStateContainer AppStateContainer
@implements IDisposable
@inject IJSRuntime JSRuntime

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BooksStore</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/">Home</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/Counter">Counter @currentCount</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/FetchData">Fetch Data</NavLink>
                </li>
                <AuthorizeView Roles="Admin">
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/Book/Form">Add Book</NavLink>
                    </li>
                </AuthorizeView>
            </ul>
        </div>
        <div class="d-flex">
            <LoginDisplay />
        </div>
    </div>
</nav>

@code
{
    private int currentCount = 0;
    private void OnCounterChanged(int newCounter)
    {
        currentCount = newCounter;
        StateHasChanged();
    }

    private void ShowAlert()
    {
        var jsInProcess = (IJSInProcessRuntime)JSRuntime;
        jsInProcess.InvokeVoid("showAlert", "Unknown user");
    }

    private async Task ShowAlertAsync()
    {
        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./site.js");
        await module.InvokeVoidAsync("showAlert", "Unkown user");
    }

    protected override void OnInitialized()
    {
        currentCount = AppStateContainer.CurrentCounter;        
        AppStateContainer.OnCounterChanged += OnCounterChanged;
    }

    public void Dispose()
    {
        AppStateContainer.OnCounterChanged -= OnCounterChanged;
    }
}