@typeparam ItemType
@inject IJSRuntime JSRuntime
@* @implements IDisposable *@

<div class="grid-container">
    @if (Items != null && Items.Any())
    {
        foreach (var item in Items)
        {
            <div class="grid-item" style="width: @_columnWidth%"
            @onclick="() => OnItemClicked.InvokeAsync(item)">
                @ItemTemplate(item)
            </div>
        }
    }
    else
    {
        <h3 class="empty-collection-title">
            No items available
        </h3>
    }
</div>

@code
{
    private int _columnWidth => 100 / ColumnsCount;
    private DotNetObjectReference<DataListView<ItemType>>? _dotNetObjectReference;

    [Parameter]
    public List<ItemType>? Items { get; set; }

    [Parameter]
    public RenderFragment<ItemType> ItemTemplate { get; set; }

    [Parameter]
    public EventCallback<ItemType> OnItemClicked { get; set; }

    [Parameter]
    public int ColumnsCount { get; set; } = 4;

    // protected async override Task OnInitializedAsync()
    // {
    //     _dotNetObjectReference = DotNetObjectReference.Create(this);
    //     await JSRuntime.InvokeVoidAsync("triggerOnWindowResized", _dotNetObjectReference);
    // }

    // [JSInvokable]
    // public void OnWindowResized(int width, int height)
    // {
    //     Console.WriteLine($"New width {width} and the new height {height}");
    // }

    // public void Dispose() => _dotNetObjectReference.Dispose();
}