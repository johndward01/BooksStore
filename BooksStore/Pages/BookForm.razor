@page "/book/form"
@using BooksStore.Blazor.Components;
@using Blazored.LocalStorage;
@inject ILocalStorageService LocalStorage
@implements IDisposable

<PageTitle>BooksStore | Add a new book</PageTitle>

<div class="row">
    <div class="col-6">
        <h2>Add a new book</h2>
        <EditForm Model="_book" OnSubmit="HandleBookFormSubmission">
            <DataAnnotationsValidator />
            <div class="form-group mt-1">
                <label>Title</label>
                <InputText @bind-Value="@_book.Title" class="form-control" />
                <ValidationMessage For="() => _book.Title" />
            </div>
            <div class="form-group mt-1">
                <label>Author</label>
                <InputText @bind-Value="@_book.Author" class="form-control" placeholder="Author" />
                <ValidationMessage For="() => _book.Author" />
            </div>
            <div class="form-group mt-1">
                <label>Description</label>
                @* <InputTextArea @bind-Value="@_book.Description" class="form-control" /> *@
                <BlazorSimpleMde @ref="_simpleMde" />
                <ValidationMessage For="() => _book.Description" />
            </div>
            <div class="form-group mt-1">
                <label>Number of pages</label>
                <InputNumber TValue="int" @bind-Value="@_book.PagesCount" class="form-control" />
                <ValidationMessage For="() => _book.PagesCount" />
            </div>
            <div class="form-group mt-1">
                <label>Price</label>
                <InputNumber TValue="decimal" @bind-Value="@_book.Price" class="form-control" />
                <ValidationMessage For="() => _book.Price" />
            </div>
            <div class="form-group mt-1">
                <label>Time</label>
                <BooksStore.Blazor.Components.InputTime @bind-Value="@_time" class="form-control" />
                <p>Selected time is @_time</p>
            </div>
            <div class="form-group mb-3">
                <input type="submit" class="btn btn-success" value="Save" />
            </div>
            
        </EditForm>
    </div>
</div>


@code
{
    enum BookFormat
    {
        Paperback,
        Ebook,
        Both
    }
    private BookFormat _bookFormat = BookFormat.Both;
    private SubmitBook _book = new();
    private TimeOnly _time = new TimeOnly(12, 30, 0);
    private BlazorSimpleMde _simpleMde;
    private System.Timers.Timer _timer = new();

    private void SetupTimer()
    {
        var second = 1000;
        _timer.Interval = 10 * second;
        _timer.Elapsed += async (sender, e) =>
        {
            await SaveFormStateAsync();
        };
        _timer.Start();
    }

    public void Dispose()
    {
        _timer.Stop();
        _timer.Dispose();
    }

    private async void HandleBookFormSubmission()
    {
        _book.Description = await _simpleMde.GetEditorValueAsync();
        Console.WriteLine("Book has been submittedsuccessfully");
        Console.WriteLine($"Title {_book.Title}");
        Console.WriteLine($"Author {_book.Author}");
        Console.WriteLine($"Price ${_book.Price}");
        Console.WriteLine($"Description{_book.Description}");
        await ClearSavedStateAsync();
    }

    private async Task SaveFormStateAsync()
    {
        _book.Description = await _simpleMde.GetEditorValueAsync();

        await LocalStorage.SetItemAsync("book", _book);
    }

    private async Task CheckSavedStateAsync()
    {
        if (await LocalStorage.ContainKeyAsync("book"))
        {
            _book = await LocalStorage.GetItemAsync<SubmitBook>("book");
        }
    }

    private async Task ClearSavedStateAsync()
    {
        await LocalStorage.RemoveItemAsync("book");
    }

    protected async override Task OnInitializedAsync()
    {
        SetupTimer();
        await CheckSavedStateAsync();
    }


}
