@page "/"
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@inject IConfiguration Configuration
@inject IWebAssemblyHostEnvironment Host
@inject IBooksService BooksService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@implements IDisposable

<PageTitle>Index | Page @PageNumber</PageTitle>

<h1>Welcome to our Books Store!</h1>

<h3>Available Books:</h3>
<DataListView ItemType="Book" Items="_books" ColumnsCount="4">
    <ItemTemplate>
        <BookCard Book="@context" OnAddToCartClicked="AddToCart" />
    </ItemTemplate>
</DataListView>

<div class="mt-2">
    <button class="btn btn-primary" @onclick="() => GoToPage(1)">1</button>
    <button class="btn btn-primary" @onclick="() => GoToPage(2)">2</button>
    <button class="btn btn-primary" @onclick="() => GoToPage(3)">3</button>
</div>

<h3 class="mt-3">My Cart</h3>
<ul>
    @foreach (var item in _booksCart)
    {
        <li>@item.Title</li>
    }
</ul>

<ModalPopup Title="Hi!" IsOpen="@_isWelcomeModalOpen" OnCloseClicked="() => _isWelcomeModalOpen = false">
    <ChildContent>
        <p> Welcome to our Books Store, here you will find a huge collection of books to help you build you career in software development, enjoy it!</p>
    </ChildContent>
    <FooterContent>
        <button class="btn btn-primary" @onclick="() => _isWelcomeModalOpen = false">Discover It</button>
    </FooterContent>
</ModalPopup>

@code
{
    private bool _isWelcomeModalOpen = true;
    private List<Book> _books = new List<Book>();
    private List<Book> _booksCart = new List<Book>();

    [Parameter]
    [SupplyParameterFromQuery(Name = "pageNumber")]
    public int PageNumber { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private void GoToPage(int pageNumber)
    {
        PageNumber = pageNumber;
        Navigation.NavigateTo($"/?pageNumber={pageNumber}");
        // TODO: Logic to fetch the books by the new page number
    }

    protected override void OnParametersSet()
    {
        if (PageNumber <= 0)
        {
            PageNumber = 1;
        }
    }

    protected override async Task OnInitializedAsync()
    {        
        Navigation.LocationChanged += Navigation_LocationChanged;
        _books = await BooksService.GetAllBooksAsync();
        // _books = await GetBooksAsync();

        var authState = await AuthenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            // Execute logic if the user is authenticated
        }
    }

    private void AddToCart(Book selectedBook)
    {
        _booksCart.Add(selectedBook);
    }

    private void Navigation_LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Console.WriteLine($"The location changed to {e.Location}");
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= Navigation_LocationChanged;
    }
}